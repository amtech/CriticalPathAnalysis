syntax = "proto3";

option java_multiple_files = true;
option java_package = "kvprog";

package kvprog;

service KvStore {
  // Store KV.
  rpc Put (PutRequest) returns (PutReply) {}
  // Get existing KV.
  rpc Get (GetRequest) returns (GetReply) {}
  // Metadata about calls seen.
  rpc Calls (CallsRequest) returns (CallsReply) {}
}

message PutRequest {
  string key = 1;
  string value = 2;
}

message PutReply {
  enum Status {
    SUCCESS = 0;   // Operation succeeded
    NOTFOUND = 1;  // Key was not found
    SYSTEMERR = 2; // Some kind of system error occurred
  };

  Status status = 1;
}

message GetRequest {
  string key = 1;
}

message GetReply {
  enum Status {
    NOTFOUND = 0;   // Key was not found
    SYSTEMERR = 1; // Some kind of system error occurred
  };

  oneof ValOrStatus {
    string value = 1;
    Status failure = 2;
  }
}

message CallsRequest {
}

message CallsReply {
  repeated CriticalPath critical_path = 1;
}

// An element of the critical path.
// For example:
// @Produces
// ListenableFuture<Out> produceOut() {
//   Request request = generateRequest();
//   return getOutService.send(request);
// }
// produceOut# will be one PathElement, with a sub_element of getOutService.
// The duration of this element will be the generateRequest# computation, and
// the latency of the RPC call will show up in a different child path_element.
message PathElement {
  // This should be a specific path to the location the cost was incurred.
  // Examples include a path in the producer graph log or the RPCStats tree.
  optional string source = 1;
  // How much time was consumed by this entry, in seconds.
  optional double cost_sec = 2;
}

// An ordered sequence of path elements.
//
// Each RPC & Producer Node contributes a path element, which includes a name & duration.
// Each critical path is not the full execution graph, but a linear walk through the graph.
message CriticalPath {
  repeated PathElement element = 1;
}
